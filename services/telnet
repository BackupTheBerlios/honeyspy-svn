#!/usr/bin/env python

from twisted.protocols.telnet import *
from twisted.application import service,internet
from twisted.internet import protocol,defer,reactor,stdio
class TelnetProtocol(Telnet):
    def connectionMade(self):
        print "TelnetProtocol.connectionMade"
        Telnet.connectionMade(self)

    def telnet_Password(self, paswd):
        """I accept a password as an argument, and check it with the
            checkUserAndPass method. If the login is successful, I call
            loggedIn()."""
        self.write(IAC+WONT+ECHO+"*****\r\n")
        #try:
            # checked = self.checkUserAndPass(self.username, paswd)
        #except:
            # return "Done"
        #if not checked:
            # return "Done"
        self.loggedIn()
        return "Command"


        def dataReceived(self,data):
            print "TelnetProtocol.dataReceived"
            print data
            Telnet.dataReceived(self,data)

class TelnetFactory(protocol.ServerFactory):
    protocol = TelnetProtocol
    def __init__(self, **kwargs): 
        self.users = kwargs

    def getUser(self, user):
        print "TelnetFactory.getUser"
        print user
        return defer.succeed(self.users.get(user, "No such user"))

application=service.Application('serial')

factory = TelnetFactory()

setattr(factory, 'primes', '')
protocol = factory.buildProtocol('a');

stdio.StandardIO(protocol);

reactor.run()
